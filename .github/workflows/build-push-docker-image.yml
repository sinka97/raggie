name: build-push-docker-image

on:
  push:
    branches: [ "dev", "main" ]

permissions:
  id-token: write
  contents: read

env:
  REPO_NAME: raggie

jobs:
  build-image-push-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.ECR_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Extract version from version.json
        id: get-project-version
        run: |
          version=$(jq -r .version version.json)
          echo "Extracted version: $version"
          echo "PROJECT_VERSION=$version" >> $GITHUB_OUTPUT

      - name: Create .env file within app folder
        run: |
          echo "GOOGLE_CSE_ID='${{ secrets.GOOGLE_CSE_ID }}'" > ./src/.env
          echo "GOOGLE_API_KEY='${{ secrets.GOOGLE_API_KEY }}'" > ./src/.env
          echo "ANTHROPIC_API_KEY='${{ secrets.ANTHROPIC_API_KEY }}'" > ./src/.env
          echo "LLAMA_CLOUD_API_KEY='${{ secrets.LLAMA_CLOUD_API_KEY }}'" > ./src/.env

      - name: Build, tag, and push image to AWS ECR
        id: build-image
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.get-project-version.outputs.PROJECT_VERSION }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          aws ecr get-login-password --region $AWS_REGION | docker login -u AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Simulate ECR image scan with vulnerability scanner
        continue-on-error: true
        run: |
          echo "Instead of running an actual vulnerability scanner, print out debug info"
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }}
          echo GITHUB_WORKSPACE: $GITHUB_WORKSPACE
          echo image tag: ${{ steps.build-image.outputs.image }}
          
  tf-deploy:
    needs: build-image-push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.TF_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform

        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false